{"version":3,"sources":["serviceWorkerRegistration.js","components/Calendar/calendar.js","components/Calendar/index.jsx","App.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DAYS_IN_WEEK","DAYS_IN_MONTH","WEEK_DAYS_FROM_MONDAY","Month","January","February","March","April","May","June","July","August","September","October","Novermber","December","areEqual","a","b","getFullYear","getMonth","getDate","getMonthData","year","month","result","date","Date","daysInMonth","isLeapYear","getDaysInMonth","monthStartsOn","dayOfWeek","getDay","getDayOfWeek","day","i","j","undefined","Calendar","_this","props","currentDate","selectedDate","handlePrevMonthButtonClick","setState","handleNextMonthButtonClick","handleSelectChange","yearSelect","value","monthSelect","handleDayClick","onChange","_this2","this","_this$props","years","monthNames","weekDayNames","_this$state","monthData","calendar","react_default","createElement","className","onClick","ref","element","map","name","index","key","week","classnames","today","selected","React","Component","defaultProps","Function","prototype","App","handleDateChange","toLocaleDateString","Calendar_Calendar","ReactDOM","render","App_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","headers","Service-Worker","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.46de27f7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const DAYS_IN_WEEK = 7;\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nconst WEEK_DAYS_FROM_MONDAY = [6, 0, 1, 2, 3, 4, 5];\n\nconst Month = {\n    January: 0,\n    February: 1,\n    March: 2,\n    April: 3,\n    May: 4,\n    June: 5,\n    July: 6,\n    August: 7,\n    September: 8,\n    October: 9,\n    Novermber: 10,\n    December: 11\n};\n\nexport function areEqual(a, b) {\n    if (!a || !b) return false;\n\n    return (\n        a.getFullYear() === b.getFullYear() &&\n        a.getMonth() === b.getMonth() &&\n        a.getDate() === b.getDate()\n    );\n}\n\nexport function isLeapYear(year) {\n    return !((year % 4) || (!(year % 100) && (year % 400)));\n}\n\nexport function getDaysInMonth(date) {\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    const daysInMonth = DAYS_IN_MONTH[month];\n    \n    if (isLeapYear(year) && month === Month.February) {\n        return daysInMonth + 1;\n    } else {\n        return daysInMonth;\n    }\n}\n\nexport function getDayOfWeek(date) {\n    const dayOfWeek = date.getDay();\n\n    return WEEK_DAYS_FROM_MONDAY[dayOfWeek];\n}\n\nexport function getMonthData(year, month) {\n    const result = [];\n    const date = new Date(year, month);\n    const daysInMonth = getDaysInMonth(date);\n    const monthStartsOn = getDayOfWeek(date);\n    let day = 1;\n\n    for (let i = 0; i < (daysInMonth + monthStartsOn) / DAYS_IN_WEEK; i++) {\n        result[i] = [];\n        \n        for (let j = 0; j < DAYS_IN_WEEK; j++) {\n            if ((i === 0 && j < monthStartsOn) || day > daysInMonth) {\n                result[i][j] = undefined;\n            } else {\n                result[i][j] = new Date(year, month, day++);\n            }\n        }\n    }\n\n    return result;\n}","import React from 'react';\nimport classnames from 'classnames';\n\nimport * as calendar from './calendar';\n\nimport './index.css';\n\nexport default class Calendar extends React.Component {\n    static defaultProps = {\n        date: new Date(),\n        years: [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026],\n        monthNames: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],\n        weekDayNames: ['Пн', 'Вт', 'Ср', 'Чт' , 'Пт', 'Сб', 'Вс'],\n        onChange: Function.prototype\n    };\n\n    state = {\n        date: this.props.date,\n        currentDate: new Date(),\n        selectedDate: null\n    };\n\n    get year() {\n        return this.state.date.getFullYear();\n    }\n\n    get month() {\n        return this.state.date.getMonth();\n    }\n\n    get day() {\n        return this.state.date.getDate();\n    }\n\n    handlePrevMonthButtonClick = () => {\n        const date = new Date(this.year, this.month - 1);\n\n        this.setState({ date });\n    };\n\n    handleNextMonthButtonClick = () => {\n        const date = new Date(this.year, this.month + 1);\n\n        this.setState({ date });\n    };\n\n    handleSelectChange = () => {\n        const year = this.yearSelect.value;\n        const month = this.monthSelect.value;\n\n        const date = new Date(year, month);\n\n        this.setState({ date });\n    };\n\n    handleDayClick = date => {\n        this.setState({ selectedDate: date });\n\n        this.props.onChange(date);\n    };\n\n    render() {\n        const { years, monthNames, weekDayNames } = this.props;\n        const { currentDate, selectedDate } = this.state;\n\n        const monthData = calendar.getMonthData(this.year, this.month);\n\n        return (\n            <div className=\"calendar\">\n                <header>\n                    <button onClick={this.handlePrevMonthButtonClick}>{'<'}</button>\n\n                    <select\n                        ref={element => this.monthSelect = element}\n                        value={this.month}\n                        onChange={this.handleSelectChange}\n                    >\n                        {monthNames.map((name, index) =>\n                            <option key={name} value={index}>{name}</option>\n                        )}\n                    </select>\n\n                    <select\n                        ref={element => this.yearSelect = element}\n                        value={this.year}\n                        onChange={this.handleSelectChange}\n                    >\n                        {years.map(year =>\n                            <option key={year} value={year}>{year}</option>\n                        )}\n                    </select>\n\n                    <button onClick={this.handleNextMonthButtonClick}>{'>'}</button>\n                </header>\n\n                <table>\n                    <thead>\n                        <tr>\n                            {weekDayNames.map(name =>\n                                <th key={name}>{name}</th>\n                            )}\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {monthData.map((week, index) =>\n                            <tr key={index} className=\"week\">\n                                {week.map((date, index) => date ?\n                                    <td\n                                        key={index}\n                                        className={classnames('day', {\n                                            'today': calendar.areEqual(date, currentDate),\n                                            'selected': calendar.areEqual(date, selectedDate)\n                                        })}\n                                        onClick={() => this.handleDayClick(date)}\n                                    >{date.getDate()}</td>\n                                    :\n                                    <td key={index} />\n                                )}\n                            </tr>\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport Calendar from './components/Calendar';\n\nexport default class App extends React.Component {\n\tstate = {\n\t\tdate: null\n\t};\n\n\thandleDateChange = date => this.setState({ date });\n\n\trender() {\n\t\tconst { date } = this.state;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{date && <p>Выбранная дата: {date.toLocaleDateString()}</p>}\n\n\t\t\t\t<Calendar\n\t\t\t\t\tonChange={this.handleDateChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}